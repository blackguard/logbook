{
    "nb_type": "esbook",
    "nb_version": "2.0.0",
    "elements": [
        {
            "id": "id-e856aeab-cba3-4d2a-ad39-f637634206a7",
            "input": "//\nconst { range, asyncify_iterable, chain_async } = await import_lib('iterable-util.js');\n\nconst ai = asyncify_iterable(range(10), 100);\n\nprintln('flat');\nconst ai2 = asyncify_iterable(range(100, 105), 30);\nconst aix = asyncify_iterable([111, asyncify_iterable(['a', [ 'b', 'cd', ai, 'ef' ], ai2, 'ghi'], 300), 222], 200);\nfor (const depth of range(6)) {\n    printf('%s', ` depth=${depth}:`);\n    await aix.flat(depth).for_each(x => printf('%s', ` ${Array.isArray(x) ? `[${x}]` : sprintf('%j', x)}`));\n    println();\n}\n\nprintln();\nprintln('chain');\nawait chain_async(ai, 'abc', ai2).for_each(x => printf('%s', ` ${Array.isArray(x) ? `[${x}]` : x}`));\nprintln();\n\nprintln();\nprintln('tee');\nconst streams = ai.tee(3);\nfor (const i in streams) {\n\tawait streams[i].for_each(x => printf('%s', ` ${x}/${i}`));\n    println();\n}\n\nprintln();\nprintln('asyncify string');\nawait asyncify_iterable('abcdefg', 100).for_each(x => printf('%s', ` ${x}`));\nprintln();\n",
            "output": [
                {
                    "type": "text",
                    "text": "flat\n"
                },
                {
                    "type": "text",
                    "text": " depth=0: {}\n depth=1: 111 {} 222\n depth=2: 111 \"a\" [b,cd,[object async_iterable],ef] {} \"ghi\" 222\n depth=3: 111 \"a\" \"b\" \"cd\" {} \"ef\" 100 101 102 103 104 \"g\" \"h\" \"i\" 222\n depth=4: 111 \"a\" \"b\" \"c\" \"d\" 0 1 2 3 4 5 6 7 8 9 \"e\" \"f\" 100 101 102 103 104 \"g\" \"h\" \"i\" 222\n depth=5: 111 \"a\" \"b\" \"c\" \"d\" 0 1 2 3 4 5 6 7 8 9 \"e\" \"f\" 100 101 102 103 104 \"g\" \"h\" \"i\" 222\n\nchain\n 0 1 2 3 4 5 6 7 8 9 a b c 100 101 102 103 104\n\ntee\n 0/0 1/0 2/0 3/0 4/0 5/0 6/0 7/0 8/0 9/0\n 0/1 1/1 2/1 3/1 4/1 5/1 6/1 7/1 8/1 9/1\n 0/2 1/2 2/2 3/2 4/2 5/2 6/2 7/2 8/2 9/2\n\nasyncify string\n a b c d e f g\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-edc160e3-b09d-4f3d-a1ca-0db873a53d2a",
            "input": "//\nconst { range, asyncify_iterable, chain_async } = await import_lib('iterable-util.js');\n\nconst ai = asyncify_iterable(range(10), 100);\n\nprintln('START: map');\nfor await (const i of ai.map(x => x**2)) {\n  printf(` ${i}`);\n}\nprintln();\nprintln('DONE');\n\nprintln();\nprintln('START: map/pluck');\nfor await (const i of ai.map(x => ({ value: ` | x is ${x} |` })).pluck('value')) {\n  printf(` ${i}`);\n}\nprintln();\nprintln('DONE');\n\nprintln();\nprintln('START: for_each');\nawait ai.for_each(x => printf('%s', ` ${x}`));\nprintln();\nprintln('DONE');\n\nprintln();\nprintln('START: cycle');\nfor await (const i of ai.cycle(3)) {\n  printf(` ${i}`);\n}\nprintln();\nprintln('DONE');\n\nprintln();\nprintln('START: nth');\nprintln(await ai.nth(7));\nprintln('DONE');\n\nprintln();\nprintln(`some  x <  5: ${await ai.some(x => x < 5)}`);\nprintln(`some  x >  8: ${await ai.some(x => x > 8)}`);\nprintln(`some  x >  9: ${await ai.some(x => x > 9)}`);\nprintln(`every x <  5: ${await ai.every(x => x < 5)}`);\nprintln(`every x >= 0: ${await ai.every(x => x >= 0)}`);\n\nprintln();\nprintln('map/find');\nprintf('%4j\\n', await ai.map((x, i) => ({ square: x**2, x, i })).find(y => y.square > 5));\n",
            "output": [
                {
                    "type": "text",
                    "text": "START: map\n 0 1 4 9 16 25 36 49 64 81\nDONE\n\nSTART: map/pluck\n  | x is 0 |  | x is 1 |  | x is 2 |  | x is 3 |  | x is 4 |  | x is 5 |  | x is 6 |  | x is 7 |  | x is 8 |  | x is 9 |\nDONE\n\nSTART: for_each\n 0 1 2 3 4 5 6 7 8 9\nDONE\n\nSTART: cycle\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\nDONE\n\nSTART: nth\n7\nDONE\n\nsome  x <  5: true\nsome  x >  8: true\nsome  x >  9: false\nevery x <  5: false\nevery x >= 0: true\n\nmap/find\n{\n    \"square\": 9,\n    \"x\": 3,\n    \"i\": 3\n}\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-f61fb666-61ee-43d6-8637-29ac728908c3",
            "input": "//\nprintln('START');\nconst interval = 250;\nlet i = 10;\nfunction make_iter(done) {\n    function iter() {\n        if (i >= 0) {\n            printf('%s', ` ${i}`);\n            i--;\n            setTimeout(iter, 100);\n        } else {\n            println();\n            println('DONE');\n            done();\n        }\n    };\n    iter()\n}\n\nnew Promise(make_iter);",
            "output": [
                {
                    "type": "text",
                    "text": "START\n"
                },
                {
                    "type": "text",
                    "text": " 10 9 8 7 6 5 4 3 2 1 0\nDONE\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-6cb489ac-63e5-4456-9e62-c34129e68176",
            "input": "//\nconst { range, asyncify_iterable, chain_async } = await import_lib('iterable-util.js');\n\nconst ai = asyncify_iterable(range(10, 0, true), 100);\n\nprintln('START ASYNC');\nfor await (const i of ai) {\n    printf(` ${i}`);\n}\nprintln();\nprintln('DONE');\n\nprintln('RESTART ASYNC');\nfor await (const i of ai) {\n    printf('%s', ` ${i}`);\n}\nprintln();\nprintln('DONE');\n",
            "output": [
                {
                    "type": "text",
                    "text": "START ASYNC\n 10 9 8 7 6 5 4 3 2 1 0\nDONE\nRESTART ASYNC\n 10 9 8 7 6 5 4 3 2 1 0\nDONE\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-ae9cb5a8-593e-40b4-8466-c5384d064bb1",
            "input": "//\nconst { range, asyncify_iterable, asyncify_event_source, delay_ms, chain_async } = await import_lib('iterable-util.js');\n\nconst ai = asyncify_event_source(async (push) => {\n    for await (const i of asyncify_iterable(range(4), 500)) {\n        println(`pushing ${i}`);\n        push({ value: i });\n    }\n    push({ done: true });\n});\n\nprintln('PASS 1');\nfor await (const i of ai) {\n    println(`==> ${i}`);\n}\nprintln();\nprintln('PASS 2');\nfor await (const i of ai) {\n    println(`==> ${i}`);\n}\n\nprintln();\nprintln('Allocate iterator and 20 results from it, then wait for them to settle:');\nprintln('> allocating...');\nconst results = [];\nlet iterator = ai[Symbol.asyncIterator]();\nfor (const i of range(20)) {\n    results.push(iterator.next());\n}\nprintln('> waiting for all pending results...');\nawait Promise.allSettled(results);\nprintln('> output results:');\nfor (const p of results) {\n    await p.then(x => printf(' %j', x));\n}\nprintln();\n\nprintln();\nprintln('Allocate iterator, then wait 4 seconds, then read the iterator:');\nprintln('> allocating iterator...');\niterator = ai[Symbol.asyncIterator]();\nprintln('> waiting 4 seconds...');\nawait delay_ms(4000);\nprintln('> output results from iterator:');\nfor (;;) {\n    const p = iterator.next();\n    const x = await p;\n    printf(' %j', x);\n    if (x.done) {\n        break;\n    }\n}\nprintln();\n\nprintln();\nprintln('Create event source iterable with max_pending_inputs=3:');\nlet done_resolve, done_promise = new Promise(resolve => done_resolve = resolve);\nlet limited_ai = asyncify_event_source(async (push) => {\n    try {\n        for await (const i of asyncify_iterable(range(4), 500)) {\n            println(`pushing ${i}`);\n            push({ value: i });\n        }\n        push({ done: true });\n    } catch (err) {\n        println('caught error:');\n        println(err);\n    }\n    done_resolve();\n}, 3);\nprintln('> allocting iterator...');\nlimited_ai[Symbol.asyncIterator]();\nprintln('> waiting for 4 calls to push()...');\nawait done_promise;\nawait delay_ms(1000);\n",
            "output": [
                {
                    "type": "text",
                    "text": "PASS 1\npushing 0\n==> 0\npushing 1\n==> 1\npushing 2\n==> 2\npushing 3\n==> 3\n\nPASS 2\npushing 0\n==> 0\npushing 1\n==> 1\npushing 2\n==> 2\npushing 3\n==> 3\n\nAllocate iterator and 20 results from it, then wait for them to settle:\n> allocating...\n> waiting for all pending results...\npushing 0\npushing 1\npushing 2\npushing 3\n> output results:\n {\"value\":0} {\"value\":1} {\"value\":2} {\"value\":3} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true} {\"done\":true}\n\nAllocate iterator, then wait 4 seconds, then read the iterator:\n> allocating iterator...\n> waiting 4 seconds...\npushing 0\npushing 1\npushing 2\npushing 3\n> output results from iterator:\n {\"value\":0} {\"value\":1} {\"value\":2} {\"value\":3} {\"done\":true}\n\nCreate event source iterable with max_pending_inputs=3:\n> allocting iterator...\n> waiting for 4 calls to push()...\npushing 0\npushing 1\npushing 2\npushing 3\ncaught error:\nError: max_pending_inputs exceeded (3)\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-aef0b575-ee20-4c9c-b631-3040a112ea7e",
            "input": "//\nconst { range, asyncify_iterable, chain_async } = await import_lib('iterable-util.js');\n\nprintln('=== SYNC ===');\n\nlet branches = range(5).map(x => x**2).tee(3);\n\nfor (const i of range(branches.length)) {\n    println(`branch ${i}:`);\n    for (const element of branches[i].map(x => ({ i, x }))) {\n        printf(' %j', element);\n    }\n    println();\n}\n\nprintln();\nfor (const i of range(branches.length)) {\n    println(`branch ${i}:`);\n    for (const element of branches[i].map(x => ({ i, x }))) {\n        printf(' %j', element);\n    }\n    println();\n}\n\nprintln();\nprintln('=== ASYNC ===');\n\nbranches = asyncify_iterable(range(5).map(x => x**2), 1000).tee(3);\n\nfor (const i of range(branches.length)) {\n    println(`branch ${i}:`);\n    for await (const element of branches[i].map(x => ({ i, x }))) {\n        printf(' %j', element);\n    }\n    println();\n}\n\nprintln();\nfor (const i of range(branches.length)) {\n    println(`branch ${i}:`);\n    for await (const element of branches[i].map(x => ({ i, x }))) {\n        printf(' %j', element);\n    }\n    println();\n}\n",
            "output": [
                {
                    "type": "text",
                    "text": "=== SYNC ===\n"
                },
                {
                    "type": "text",
                    "text": "branch 0:\n"
                },
                {
                    "type": "text",
                    "text": " {\"i\":0,\"x\":0}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":0,\"x\":1}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":0,\"x\":4}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":0,\"x\":9}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":0,\"x\":16}"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "branch 1:\n"
                },
                {
                    "type": "text",
                    "text": " {\"i\":1,\"x\":0}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":1,\"x\":1}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":1,\"x\":4}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":1,\"x\":9}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":1,\"x\":16}"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "branch 2:\n"
                },
                {
                    "type": "text",
                    "text": " {\"i\":2,\"x\":0}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":2,\"x\":1}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":2,\"x\":4}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":2,\"x\":9}"
                },
                {
                    "type": "text",
                    "text": " {\"i\":2,\"x\":16}"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "branch 0:\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "branch 1:\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "branch 2:\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "=== ASYNC ===\n"
                },
                {
                    "type": "text",
                    "text": "branch 0:\n {\"i\":0,\"x\":0} {\"i\":0,\"x\":1} {\"i\":0,\"x\":4} {\"i\":0,\"x\":9} {\"i\":0,\"x\":16}\nbranch 1:\n {\"i\":1,\"x\":0} {\"i\":1,\"x\":1} {\"i\":1,\"x\":4} {\"i\":1,\"x\":9} {\"i\":1,\"x\":16}\nbranch 2:\n {\"i\":2,\"x\":0} {\"i\":2,\"x\":1} {\"i\":2,\"x\":4} {\"i\":2,\"x\":9} {\"i\":2,\"x\":16}\n\nbranch 0:\n\nbranch 1:\n\nbranch 2:\n\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-83d13ac9-07a7-4d78-8841-5ee59a4e0913",
            "input": "//\nconst { range, asyncify_iterable, chain_async, combine_async, merge, merge_async } = await import_lib('iterable-util.js');\n\nconst iterable_configs = [\n    [ 7, 100 ],\n    [ 'abcdefghij', 300 ],\n    [ 'pqrstuvwxyz', 500 ],\n];\n\nprintln(`Creating ${iterable_configs.length} async iterables:`);\nfor (const [n, delay] of iterable_configs) {\n    println(` ${n} elements with inter-element delay ${delay}`);\n}\n\nconst iterables = iterable_configs.map(([n, delay]) => asyncify_iterable(range(n), delay));\n\nprintln();\nprintln('combine_async(...iterables):');\nfor await (const element of combine_async(...iterables)) {\n    printf(' %j', element);\n}\nprintln();\n\nprintln();\nprintln('merge_async(...iterables):');\nfor await (const element of merge_async(...iterables)) {\n    printf(' %j', element);\n}\nprintln();\n\nprintln();\nprintln('merge(...sync_iterables):');\nconst sync_iterables = iterable_configs.map(([n]) => range(n));\nfor (const element of merge(...sync_iterables)) {\n    printf(' %j', element);\n}\nprintln();\n",
            "output": [
                {
                    "type": "text",
                    "text": "Creating 3 async iterables:\n"
                },
                {
                    "type": "text",
                    "text": " 7 elements with inter-element delay 100\n"
                },
                {
                    "type": "text",
                    "text": " abcdefghij elements with inter-element delay 300\n"
                },
                {
                    "type": "text",
                    "text": " pqrstuvwxyz elements with inter-element delay 500\n"
                },
                {
                    "type": "text",
                    "text": "\n"
                },
                {
                    "type": "text",
                    "text": "combine_async(...iterables):\n [3,\"a\",\"p\"] [4,\"a\",\"p\"] [4,\"b\",\"p\"] [5,\"b\",\"p\"] [6,\"b\",\"p\"] [6,\"c\",\"p\"] [6,\"c\",\"q\"] [6,\"d\",\"q\"] [6,\"d\",\"r\"] [6,\"e\",\"r\"] [6,\"f\",\"r\"] [6,\"f\",\"s\"] [6,\"g\",\"s\"] [6,\"h\",\"s\"] [6,\"h\",\"t\"] [6,\"i\",\"t\"] [6,\"i\",\"u\"] [6,\"j\",\"u\"] [6,\"j\",\"v\"] [6,\"j\",\"w\"] [6,\"j\",\"x\"] [6,\"j\",\"y\"] [6,\"j\",\"z\"]\n\nmerge_async(...iterables):\n 0 1 \"a\" 2 3 \"p\" 4 \"b\" 5 6 \"c\" \"q\" \"d\" \"r\" \"e\" \"f\" \"s\" \"g\" \"h\" \"t\" \"i\" \"u\" \"j\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nmerge(...sync_iterables):\n 0 \"a\" \"p\" 1 \"b\" \"q\" 2 \"c\" \"r\" 3 \"d\" \"s\" 4 \"e\" \"t\" 5 \"f\" \"u\" 6 \"g\" \"v\" \"h\" \"w\" \"i\" \"x\" \"j\" \"y\" \"z\"\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-3014d995-80e5-46d2-b33b-8fc6b9adb212",
            "input": "//\nconst { range, asyncify_iterable, chain_async, asyncify_event_source } = await import_lib('iterable-util.js');\n\nconst aie = asyncify_event_source(async (push, error) => {\n    for await (const i of asyncify_iterable(range(4), 500)) {\n        println(`pushing ${i}`);\n        push({ value: i });\n    }\n    error(new Error());\n    push({ done: true });\n});\n\nconst branches = aie.tee(3);\n\nfor (const i of range(branches.length)) {\n    try {\n        println(`branch ${i}:`);\n        for await (const element of branches[i].map(x => ({ i, x }))) {\n            println(JSON.stringify(element));\n        }\n        println();\n    } catch (err) {\n        println(`==> caught error`);\n        println(err);\n    }\n}\n",
            "output": [
                {
                    "type": "text",
                    "text": "branch 0:\npushing 0\n{\"i\":0,\"x\":0}\npushing 1\n{\"i\":0,\"x\":1}\npushing 2\n{\"i\":0,\"x\":2}\npushing 3\n{\"i\":0,\"x\":3}\n==> caught error\nError\nbranch 1:\n{\"i\":1,\"x\":0}\n{\"i\":1,\"x\":1}\n{\"i\":1,\"x\":2}\n{\"i\":1,\"x\":3}\n==> caught error\nError\nbranch 2:\n{\"i\":2,\"x\":0}\n{\"i\":2,\"x\":1}\n{\"i\":2,\"x\":2}\n{\"i\":2,\"x\":3}\n==> caught error\nError\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-bb05e339-2a8f-4202-a1e4-9a313ba573f5",
            "input": "//\nconst { range, delay_ms, asyncify_event_source, asyncify_iterable, combine_async, merge, merge_async, extended_iterable_from_generator } = await import_lib('iterable-util.js');\n\nawait new Promise(async finish => {\n\n    println('=== aie ===');\n\n    const aie = asyncify_event_source(async (push, error) => {\n        for await (const i of asyncify_iterable(range(4), 500)) {\n            println(`pushing ${i}`);\n            push({ value: i });\n        }\n        error();\n        push({ done: true });\n    });\n\n    println('single:');\n    try {\n        for await (const element of aie) {\n            println(element);\n        }\n    } catch (err) {\n        println(`==> caught error`, err);\n    }\n\n    println('tee:');\n    const aie_branches = aie.tee(3);\n    for (const i of range(aie_branches.length)) {\n        try {\n            println(`branch ${i}:`);\n            for await (const element of aie_branches[i].map(x => ({ i, x }))) {\n                println(JSON.stringify(element));\n            }\n            println();\n        } catch (err) {\n            println(`==> caught error`, err);\n        }\n    }\n\n    println();\n    println('=== ie ===');\n\n    const ie = extended_iterable_from_generator(function* () {\n        yield* [1, 2, 3];\n        throw new Error();\n    });\n\n    println('single:');\n    try {\n        for (const element of ie) {\n            println(element);\n        }\n    } catch (err) {\n        println(`==> caught error`, err);\n    }\n\n    println('tee:');\n    const ie_branches = ie.tee(3);\n    for (const i of range(ie_branches.length)) {\n        try {\n            println(`branch ${i}:`);\n            for (const element of ie_branches[i].map(x => ({ i, x }))) {\n                println(JSON.stringify(element));\n            }\n            println();\n        } catch (err) {\n            println(`==> caught error`, err);\n        }\n    }\n\n    finish();\n});\n",
            "output": [
                {
                    "type": "text",
                    "text": "=== aie ===\n"
                },
                {
                    "type": "text",
                    "text": "single:\npushing 0\n0\npushing 1\n1\npushing 2\n2\npushing 3\n3\n==> caught error\ntee:\nbranch 0:\npushing 0\n{\"i\":0,\"x\":0}\npushing 1\n{\"i\":0,\"x\":1}\npushing 2\n{\"i\":0,\"x\":2}\npushing 3\n{\"i\":0,\"x\":3}\n==> caught error\nbranch 1:\n{\"i\":1,\"x\":0}\n{\"i\":1,\"x\":1}\n{\"i\":1,\"x\":2}\n{\"i\":1,\"x\":3}\n==> caught error\nbranch 2:\n{\"i\":2,\"x\":0}\n{\"i\":2,\"x\":1}\n{\"i\":2,\"x\":2}\n{\"i\":2,\"x\":3}\n==> caught error\n\n=== ie ===\nsingle:\n1\n2\n3\n==> caught error\ntee:\nbranch 0:\n{\"i\":0,\"x\":1}\n{\"i\":0,\"x\":2}\n{\"i\":0,\"x\":3}\n==> caught error\nbranch 1:\n{\"i\":1,\"x\":1}\n{\"i\":1,\"x\":2}\n{\"i\":1,\"x\":3}\n==> caught error\nbranch 2:\n{\"i\":2,\"x\":1}\n{\"i\":2,\"x\":2}\n{\"i\":2,\"x\":3}\n==> caught error\n"
                }
            ],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        },
        {
            "id": "id-2b30f37a-9574-4ae8-86ec-fe2790ab7595",
            "input": "",
            "output": [],
            "formatting_options": {
                "align": "left",
                "indent": "0em"
            }
        }
    ]
}