f11, ctrl-alt-I, etc do not work when e.g., body is focused
click on body leave body selected (want: select active cell)
key bindings do not work when tool-bar elements (e.g., type selector) are focused
lazy-load the support files for renderers (esp. Plotly which is so large)
when theme css variables change, the user's stored theme-settings are no longer valid
visible indicator shows "not visible" (may be only when visible is set on loaded element)
fix css overrides for graphviz, one problem being that arrowhead fill is wrong
graphviz graphics flash black when reloading examples/test.html
remove border from rendered graphviz objects
validate that themes from storage define the correct properties
empty cell does not show anything visible unless editable
graphviz (and other?) formats do not respect dark mode
when in dark mode, document flashes white momentarily when loading document
filter mutations in ChangeManager (e.g., tool-bar attributes, contenteditable, etc).  Still perform them, but do not count them in the "neutral" determination.
fix dialog and settings-dialog in the way they handle the header, main and #ui elements
set contenteditable for empty document (so that not just a blank page is displayed), or indicate that the document is empty
fix sbom -- packages loaded dynamically and loaded via load_script (which is true for most packages) are not accounted for
maybe prevent default generation of element ids by create_element()
menu navigation with mouse is sluggish
review uses of addEventListener() (maybe use EventListenerManager instead)
make sure LogbookManager.singleton.active_cell remains valid when deleting stuff or otherwise modifying document
make toggle-switch more ui-aware (press space to click, aria stuff, etc)
toggle-menu command (for keyboard)
implement recents
implement go/stop control in tool-bar
improve saving
save can cause disconnect between current document and its "file_handle" if the user saves to a different file
replace make with npm, grunt, or similar (?)
update examples / convert old esbook examples
Map vs Object (problems: ephemeral_eval_context, vars() in code, logbook_manager.#global_eval_context, fs_interface (?), ...) (https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md)


--- DONE ---
save is broken
update dark theme in src/settings/theme-settings.js
handle (prefers-color-scheme: light) [nothing to do, it's just the default]
implement dark/light mode setting in ui
rationalize style settings in preparation for dark/light mode
rationalize use of LocalStorage and IndexedDB for config, recents, settings and theme_settings (use IndexedDB instead of LocalStorage)
make KeySpec, etc events fire directly so they do not lose the "trusted" aspect (e.g., for "paste") (good enough now?)
implement and use LogbookManager.singleton.update_menu_state()
new cell should be set to "visible" (ended up instead requiring "contenteditable" for document in command handlers)
content->main, controls->header
dblclick handler in ToolBarElement is improper when ToolBarElement is used in the top-level menu, and not a cell
dblclick in output toggles visibility but also selects word in output (sometimes?)
undo setting eval-cell visible: eval cell has "data-visible" attribute set to "null" (should have removed the attribute)
first click in newly-opened document's first eval-cell sends focus to <body>, second click causes document modification but focuses to eval-cell
handle keypresses originating outside of cells
find alternate implementation of KeySpec.#is_on_macos (just changed the order so that navigator.userAgentData.platform is tried before navigator.platform)
ChangeManager: handle initial "neutral" setting better (using setTimeout() currently)
make clicking status-bar not move selection in eval-cell (currently selection gets reset)
show "modified" warning when closing
save: remove status-bar elements
'+' and '-' KeySpec problems


--- HOLD ---
subscribe()s leak if not unsubscribed (probably "expected behavior")
static initialization for classes should not automatically add stylesheet (do it on demand later)
context menu cut/copy/paste: can this be hooked to use our internal implementation?
make sure deleting selection that contains elements with !element_too deletes only the text
rtl text is not handled correctly
make modification operations direction-aware (ltr vs rtl)


=== ARCHITECTURAL OVERVIEW ===

Note: Each eval-cell maintains its own key_event_manager and key maps.
Therefore the (active) eval-cell is the locus for incoming commands,
whether from the menu or the keyboard.  The eval-cell in effect "precompiles"
command dispatch in eval_cell.get_command_bindings().

===

LogbookManager
- keeps track of "active cell" (necessary for directing menu commands)
- maintains global ChangeManager
- maintains global eval context
- sets up menubar
- contains some document-level command handlers

EvalCellElement / EditorCellElement
- eval_cell.eval() --> Evaluator.content_recognizer(this) to get evaluator_class --> evaluator_class.eval()
- constructor allocates a KeyEventManager (with a new keymap)
- implements method perform_command(command_context)
- instance handles commands from key_event_manager via perform_command()
- perform_command() is called from LogbookManager for commands from the menu

Evaluators
- evaluate an input cell into an output output
- Evaluator.handles(input_element, innerText=null)
- Evaluator.content_recognizer(input_element, innerText=null)  // async
- Evaluator.eval(input_element, output_element, eval_context=null) --> create instance --> evaluator._perform_eval()
- create instance allocates an output_context

OutputContext
- output_context.invoke_renderer(type, value, options=null)
- manages output operations to output_element
- (DOM manipulation methods for the output element)
- etc...

(eval context)
(ephemeral eval context)

(command context)

Renderers
- render specific type of content with use of an output_context
- Renderer.from_id(id)
- Renderer.from_type(type)

KeyEventManager
- maintains key map stack
- listens for keyboard events and through the use of the key map stack emits commands

MenuBar
- listens for menu clicks and emits commands

Dialog

ChangeManager

KeyMap / KeySpec

(command subscriptions)

config
settings / theme-settings

help

======================================================================

dom
clipboard
change-manager (undo/redo)
input
- keymaps
- menus
command engines
persistence
- config
- data
- document

---
selection (point & mark)
"kill" ring

=== OLD TODO ===

remove use of DOMContentLoaded (rely on defer instead)
sometimes underlying markup is displayed, e.g., html('br') has been seen to cause this
nerdamer: nested functions using sum or product are not alpha-renamed properly and they fail strangely
"Typesetting math: 100%" is shown on printout (e.g., examples/solve-logistic-equation-fixed-points.esbook) (#MathJax_Message)
review Content-Security-Policy
emacs key bindings shadow other important standard key bindings (e.g., Ctrl-X)
call cleanup on change objects that are deleted by being trimmed by new edits
provide "toast" messages + dialog to display past messages
update theme-colors (for dark/light modes, etc)
system dark/light mode switch is not detected (chromium bug on gnome/linux) (perhaps only snap-installed chromium)
support dark mode in dagre css (also: Plotly and other graphics outputs)
sometimes input cell does not respond to keyboard shortcuts after focus is reset (with mouse into output area?) (focus issues?)
set width on graphics output DIVs
provide settings to only enable autoeval with prompt (prompt default false)
nerdamer matrices are rendered with simple vertical bars (TeX vmatrix seems to be hard-coded instead of bmatrix)
provide "clear" action for current output or all outputs
effects of set_formatting_options in an ie may not participate in undo/redo -- see: notebook.js: evaluate_ie(): add_ie_output_change(this, ie.id)
review setting of focus overall (many places use setTimeout() to defer setting of focus, which is kludgey)
can't scroll to last ie when focused to the next-to-last ie (if the last ie is autohide and currently has no output)
reopen does not work as expected
new notebook, add space, delete, save, cancel: notebook shows unmodified even though there are undos past the last save...
provide direct access to last recent
text coalescing does not work when multiple printf() calls happen too quickly; see: output-context.js: create_text_output_data(): output_data_collection remains empty
legacy_open() sometimes gets blocked until keypress or mouse click (seen in Firefox)
legacy_save(): no stats are returned and therefore the new filename and notebook name are not set
sometimes web workers are not removed (seen in dev tools, two sets of workers)
Save should not change focus
undo/redo should position cursor at the affected text
settings dialog and validation, while working, is a little rough around the edges
make settings dialog error messages fit within dialog better
cannot use keyboard navigation in menu when screen reader is on (focus does not move)
change menuitems to use <a> or <button> (for accessibility concerns)

documentation: create_worker(); async generator model, "objects" argument for extra arguments to EvalWorker.eval(); eval/stream_eval
documentation: legacy file handling issues: no quick-save, no modified check before save, no recents, ...
documentation: document: only the last formatting() call in an ie has effect
documentation: recommend: avoid latex equation numbers, labels, etc (use \tag{...} instead)
documentation: separate help from README.md
documentation: warning about executable content
documentation: discuss possiblility of injection vulnerabilities
documentation: interaction elements: input, output/graphics, selected_indicator
documentation: interaction elements: focus, move, add
documentation: evaluation: mdmj (template literal model), javascript (async function model)
documentation: using vars() in mdmj
documentation: mdmj: autohide, template literal, must escape ` and ${
documentation: async evaluation (mdmj and javascript)
documentation: document eval context (plus vars())
documentation: evaluation: definitions need to be progressive within the notebook
documentation: document output context
documentation: document output handlers
documentation: graphics are stored as images in saved notebooks
documentation: interaction with SVG elements (SHIFT-scroll to zoom, etc)
documentation: indicators (modified, running, formatting)
documentation: various actions (menu and key-bindings)
documentation: key bindings; menu glyphs for modifiers
documentation: settings
documentation: import (javascript)
documentation: export, also ?s= parameter on exported html
documentation: open/save dialogs (plus confirmations)
documentation: alerts, confirmation and close warnings
documentation: initial comment; autoeval, autohide
documentation: creating dialogs and ui
documentation: add demos (html-based)
documentation: browser support
documentation: local server


=== THINK ABOUT ===
need an improved CAS
update license
undo is maybe too fne-grained
review possiblility of injection vulnerabilities for javascript and mdmj; mdmj example: `+alert('hi')&&`gotcha!
mathjax menu event handlers get lost (probably with markdown processing/innerHTML)
mathjax: latex equation numbers, labels, etc need to be reset (if used)
options for printing (e.g., show autohide elements)
installer
"unevaluated" status for an ie (with an associated indicator)
support configurable key bindings
provide print_markup() (or something) in eval
save fails silently when there is a permissions error (showSaveFilePicker returns undefined for permissions error and also for user cancel)
implement auto-hide for autoeval ie and dynamically change when its input element is modified (maybe not?)
how to distribute?  create small server apps for each major platform?  how to maintain?
manage memory used by undo/redo (Change)
provide fallback for file open/save interfaces (when on non-chromium browsers)
is the use of innerHTML acceptable?
settings update broadcast to other instances (polling?)
provide options when doing export (e.g., clear outputs)
more extensively support undo/redo (Change) for output
coalesce "empty" changes to output (Change)
enable api to perform operations programmatically (e.g., eval-notebook)
re-install @yaffle/expression when it is more "distributable"
add Algebite and Mathjs
save to MIME format (multipart/mixed) to allow easy editing (issue: UTF-8) (see https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html )
use "contenteditable" element instead of CodeMirror stuff?
figure out what to do with nb_state
figure out how to reload / re-initialize eval state
figure out codemirror + emacs clipboard support
deleting element with an eval agent running something like setInterval(): old eval agent keeps running even though "stopped" (maybe on_stopped event could help)
provide on_stopped event to allow cleanup of background "processes" (e.g., setInterval)


=== UNREPEATED BUGS ====
formatting indicator is not shown after a notebook is loaded from embedded content in an html page (exported notebook)
investigate: seems like files are being reloaded a lot as elements are evaluated
pythagorean-triples.esbook: first cell lines are concatenated (saw once, but not again...)
have witnessed stray text in buffers after copying/pasting/evaluating (accidental scroll wheel paste?)


=== DONE ===
* swap cmd and shift in menu accelerator glyph order
* replace current dialog implementation with new html dialog element
* dialogs: don't let keyboard focus "fall off the edge" down to the underlying notebook
* #dialog_event_blocker is not deflecting focus (no longer used)
* indent does not work correctly (at least in "default" editor mode)
* evaluate: does exposing the src/build directory represent a risk (because its contained scripts write files)? (moved to ./build-util/)
* build demos from examples when building
* test autoeval (and also from embedded content in exported html files)
* make autoeval evaulate entire notebook
* change <ul> elements to <menu> elements in menu and fix positioning logic
* add support for web workers
* preserve notebook title in exported format
* exported notebooks: title is "undefined" when loaded
* provide legacy file handling when FileSystemFileHandle and associated API is not available (e.g., on Firefox, Safari)
* provide indicator for "formatting"
* invalid/incomplete sprintf arguments cause Uncaught TypeError that is not displayed
* theme-settings / settings are sort of mixed together
* need better validation in settings dialog (e.g., displayIndent)
* allow MathJax formatting configuration per document
* things like matrices and square root are sometimes scaled wrong in TeX output, e.g., return _('diff((e^x*sqrt(x)-e^x/(2*sqrt(x)))/x, x)') (also, exponents are large)
* canceling Save leads to another prompt and also clears file_handle and stats in notebook
* after an eval_notebook, sometimes the modified indicator indicates modified when in fact it is not (see canvas2d-demo.esbook)
* expose settings/theme-settings in eval
* empty elements when not selected are almost invisible (just a 1 pixel blank space)
* evaluate ie with containing only '//' causes an error: Unexpected token ')'
* allow empty notebooks and permit delete_element to remove the last element
* default element mode should be markup, with // on first line as mode switch sequence (switch to JavaScript)
* autohide: check when edit changes appear and also when loading
* recents: old entries are being filtered (isSameEntry() seems to always be returning true) (isSameEntry returns a promise)
* recents: cannot access file name (need to store in IndexedDB storage along with FileSystemFileHandle?)
* recents: when to rebuild recents (need to make sure we can access...)
* provide recent file interface
* exported dagre svg from an html-embedded server has arrowheads but default fill and stroke colors are transparent (style apparently not found and not embedded)
* provide keyboard navigation into and out of input areas
* menus: provide way to activate menu from keyboard (including TAB navigation to menu)
* preview images in saved notebooks that have been opened should cause a line break before next element (set examples/many-ecas.esbook)
* output-context.js: create_svg_output_data() hard-codes css selector 'svg.dagre'
* dagre: no arrow heads displayed in saved rendered image
* when loading, menus flash briefly as unformatted <ul>s before turning into menus
* first ie is initially too tall and has extraneous scroll bar
* defer loading of code until used for graphics output-handlers (e.g., plotly)
* menus: allow cross-navigation without going all the way to the top of the current menu
* menus: position submenus when opening
* menus: enable/disable menu items based on notebook state
* menus: add keyboard navigation
* menus: adjust order of modified keys in display of keyboard equivalent
* key-spec.js: key_spec_to_glyphs: is_on_macos_result not implemented (removed)
* menus: show keyboard equivalents using glyphs
* provide menus (basic functionality)
* make whether opening or importing more apparent (in file open dialog)
* file open/save dialog does not use the "suggested" filename or extensions (seems to be a deficiency of ShowSaveFilePicker)
* cannot receive click events on things like button elements in the output portion of an ie (problem: redirecting click focus from output to input)
* examples/cmjs-demo.esbook: output of count tree and of node graph are clipped and not positioned well
* notebook.js: send_tab_state_to_parent_processes: rename to something more appropriate (re-appropriated update_global_view_properties)
* provide feedback when saving and provide visible modified indicator
* need to check graphics output
* notebook imported from html embedded data starts out with modified indicator active (and yet can exit page without warning)
* not prompting user when leaving a modified page
* provide status bar (modified status, eval running, help link, ...)
* provide help link
* save/export to a loadable web page instead of a separate document format
* bundle code instead of loading out of node_modules
* dagre: edges not rendered in image_uri
* svg elements are not displayed wide enough, both in the saved image form and the rendered form (see examples/cmjs-demo.esbook)
* use Shift-ENTER for eval and Ctrl-ENTER for eval-and-stay
* make global_export not modify globalThis
* https://github.com/Yaffle/Expression / https://www.npmjs.com/package/@yaffle/expression
* canvas2d image_uri not being rendered for persistent state
* need a way to easily define variables that are visible in subsequent interaction elements
* fix loading of old facet code in examples
* markdown processing: html tags in markdown trip up the display of the element
* markdown processing: code blocks have extraneous stuff at beginning: <span class="MathJax_Preview" ... (see: https://stackoverflow.com/questions/62111699/mathjax-strangely-render-back-tick-in-code-blocks )
* [no longer relevant] make facet scripts inline-able without having been loaded via facet() [need to have one single export handler that listens for any facet export or error event]
* update facet mechanism to use ES6 modules
* settings dialog is partially hidden by event blocker element (first time only?)
* Ctrl-, can bring up multiple settings dialogs (if a settings dialog is already showing)
* implement settings dialog
* notebook.js: update_cm_from_settings(cm, ie): not defined: bind_key_handler, remove_current_key_handler
* too many questions when saving
* message_controller: provide better handling of scrolling and focus
* keyboard handling / key bindings
* notebook / notebook state
* integrate key-handler.js into key-bindings.js
* set up html for notebook during initialization
* set up css for notebook during initialization
* load codemirror
* implement esbook mode for codemirror
* reimplement stuff that uses ipcRenderer
* implement eval
* support opening/saving notebooks
* open: prompts for saving (!)
* implement interface to IndexedDB
* provide settings persistence (through IndexedDB)
* set up "recents" (through IndexedDB)
* confirm close
* switch codemirror mode based on input type (md+mj or javascript)
* update ie class according to text/code mode (watch 'change' events that affect line 1)
* move to different ie with keyboard does not set focus correctly
* implement auto-hide for non-expression inputs
* implement message_controller.confirm_sync (eliminated the need for _sync variant...)
* update output-handlers.js
* update class OutputContext in notebook.js
* update eval-agent.js
* save failed: get_fs_stats_for_file_handle is not defined
* eval: graphics element is not sized correctly (see examples/dagre-demo.esbook)
* streamline operation of output handlers
* provide interface in eval for creating output elements, etc
* eval: provide access to output_context
* make eval_fn "this" be a persistent context for the notebook
* reset the persistent context for the notebook when resetting evaluation
* add an api for creating CanvasRendering2DContext/Element
* definable notebook init script (to be run when notebook is loaded) (autoeval)
* don't load scripts more that once: load_script(), load_script_and_wait_for_condition()
